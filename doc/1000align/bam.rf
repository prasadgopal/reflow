
param (
	// threads governs how many threads to use by default in computations.
	threads = 16
)

val dirs = make("$/dirs")

val samtools = "biocontainers/samtools:v1.7.0_cv2"
val sambamba = "??"

// Index indexes a BAM file using Samtools.
func Index(bam file) file =
	exec(image := samtools, cpu := threads) (indexed file) {"
		samtools index -@ {{threads*2}} {{bam}} {{indexed}}
	"}

// Sort sorts a BAM file using Samtools
func Sort(bam file) file =
	exec(image := samtools, cpu := threads, mem := GiB) (sorted file) {"
		samtools sort --threads {{threads*4}} \
			-o {{sorted}} {{bam}}
	"}

// ShardBAM splits a BAM file according to genome regions BED file.
func Shard(bam, regions file) dir =
	exec(image := samtools, cpu := threads) (shards dir) {"
		parallel -a {{regions}} \
			--colsep '\t' -j {{threads}} --delay 1 \
			'samtools view -bh {{bam}} {1}:{2}-{3}
				> {{shards}}/{1}_{2}_{3}.bam)'
	"}

// Merge merges a list of BAM files into a single BAM file.
func Merge(bams [file]) file =
	if len(bams) == 1 {
		val [bam] = bams
		bam
	} else {
		exec(image := samtools, cpu := threads) (merged file) {"
			samtools merge -@{{threads*2}} {{merged}} {{bams}}
		"}
	}

func MarkDuplicates(bam file) (bam, bai file) = {
	val out = exec(image := sambamba, cpu := threads, mem := 32*GiB) (out dir) {"
		sambamba_v0.6.5 markdup \
			--tmpdir $tmp \
			-t {{threads*2}} \
			--sort-buffer-size 24000 \
			--overflow-list-size 10000000 \
			{{bam}} {{out}}/dupmarked.bam
		"}

	val (dupmarked, _) = dirs.Pick(out, "dupmarked.bam")
	val (index, _) = dirs.Pick(out, "dupmarked.bam.bai")
	(dupmarked, index)
}

func FilterDedupAndMapQ(bam file, mapq int) (bam file) =
	exec(image := sambamba, cpu := threads) (filtered file) {"
		sambamba_v0.6.5 view -F "mapping_quality >= {{mapq}} and not duplicate" \
		-t {{threads*2}} \
		-f bam {{bam}} > {{filtered}}
	"}
